name: 'Backend: Continuous Integration'

on:
  pull_request:
    paths:
      - '**.php'

jobs:
  style:
    name: Check & Fix Styling
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}

      - name: Fix style
        uses: aglipanci/laravel-pint-action@2

      - name: Commit changes
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: Fix styling

  static-analysis:
    name: Run Static Analysis
    needs: style
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.2
          extensions:
            dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif,
            iconv, imagick
          coverage: none

      - name: Restore vendor cache
        id: cache-vendor
        uses: actions/cache@v2
        with:
          path: vendor
          key: ${{ runner.os }}-backend-${{ hashFiles('composer.lock') }}
          restore-keys: ${{ runner.os }}-backend-${{ hashFiles('composer.lock') }}

      - name: Install dependencies
        if: steps.cache-vendor.outputs.cache-hit != 'true'
        run: composer install --prefer-dist --no-interaction --no-suggest --ignore-platform-reqs

      - name: Run static analysis
        run: vendor/bin/phpstan analyze

  tests:
    name: Run Tests
    needs: style
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.2
          extensions:
            dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif,
            iconv, imagick
          coverage: none

      - name: Create database
        run: |
          sudo /etc/init.d/mysql start
          mysql -u root -proot -e 'CREATE DATABASE IF NOT EXISTS robograding;'

      - name: Restore vendor cache
        id: cache-vendor
        uses: actions/cache@v2
        with:
          path: vendor
          key: ${{ runner.os }}-backend-${{ hashFiles('composer.lock') }}
          restore-keys: ${{ runner.os }}-backend-${{ hashFiles('composer.lock') }}

      - name: Install dependencies
        if: steps.cache-vendor.outputs.cache-hit != 'true'
        run: composer install --prefer-dist --no-interaction --no-suggest --ignore-platform-reqs

      - name: Execute tests
        run: vendor/bin/pest --parallel
        env:
          DB_CONNECTION: mysql
          DB_PORT: ${{ job.services.mysql.ports[3306] }}
          DB_DATABASE: robograding
          DB_USERNAME: root
          DB_PASSWORD: root
